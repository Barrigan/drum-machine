{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","drumPadArray","className","id","playKey","sound","buttonPressed","drumPad","this","toString","toUpperCase","playAudioById","document","getElementById","play","App","props","displayedKey","key","setState","pressedKey","state","handlePressedKey","bind","event","target","value","filter","length","addEventListener","$","ready","addClass","removeClass","map","onClick","src","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,kC,+KCSrCC,EAAe,CAAC,CAClBC,UAAY,oBACZC,GAAI,gBACJC,QAAS,IACTC,MAAO,qBAET,CACEH,UAAY,oBACZC,GAAI,UACJC,QAAS,IACTC,MAAO,eAET,CACEH,UAAY,oBACZC,GAAI,SACJC,QAAS,IACTC,MAAO,cAET,CACEH,UAAY,oBACZC,GAAI,SACJC,QAAS,IACTC,MAAO,cAET,CACEH,UAAY,oBACZC,GAAI,YACJC,QAAS,IACTC,MAAO,iBAET,CACEH,UAAY,oBACZC,GAAI,UACJC,QAAS,IACTC,MAAO,eAET,CACEH,UAAY,oBACZC,GAAI,gBACJC,QAAS,IACTC,MAAO,qBAET,CACEH,UAAY,oBACZC,GAAI,UACJC,QAAS,IACTC,MAAO,eAET,CACEH,UAAY,oBACZC,GAAI,kBACJC,QAAS,IACTC,MAAO,wBAMX,SAASC,EAAcC,GACrB,OAAOA,EAAQH,SAAWI,KAAKC,WAAWC,cAG5C,SAASC,EAAcR,GACbS,SAASC,eAAeV,GAC9BW,O,IA2EWC,E,kDAtEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAUVC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,WAAYF,KAVZ,EAAKG,MAAQ,CACXD,WAAa,eAGf,EAAKE,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAPP,E,6DAiBJC,GACfhB,KAAKS,aAAaO,EAAMC,OAAOC,OAE/B,IAAInB,EAAUN,EAAa0B,OAAOrB,EAAckB,EAAMC,OAAOC,OACzDnB,EAAQqB,QAAU,GACpBjB,EAAcJ,EAAQ,GAAGH,W,0CAIR,IAAD,OAClBQ,SAASiB,iBAAiB,WAAW,SAAAL,GACnC,IAAIjB,EAAUN,EAAa0B,OAAOrB,EAAckB,EAAMN,KAClDX,EAAQqB,QAAU,IAEpBE,IAAElB,UAAUmB,OAAM,WAChB,IAAI5B,EAAK,IAAII,EAAQ,GAAGJ,GACxB2B,IAAE3B,GAAI6B,SAAS,mBAEjBrB,EAAcJ,EAAQ,GAAGH,SACzB,EAAKa,aAAaV,EAAQ,GAAGH,aAIjCQ,SAASiB,iBAAiB,SAAS,SAAAL,GACjC,IAAIjB,EAAUN,EAAa0B,OAAOrB,EAAckB,EAAMN,KAClDX,EAAQqB,QAAU,GACpBE,IAAElB,UAAUmB,OAAM,WAChB,IAAI5B,EAAK,IAAII,EAAQ,GAAGJ,GACxB2B,IAAE3B,GAAI8B,YAAY,wB,+BAOf,IAAD,OACN,OACA,6BACE,yBAAK/B,UAAU,0BACdD,EAAaiC,KAAI,SAAC3B,GAAD,OAChB,4BAAQL,UAAWK,EAAQL,UAAWC,GAAII,EAAQJ,GAAIgC,QAAS,EAAKb,iBAAiBC,KAAK,GAAOG,MAAOnB,EAAQH,SAC7GG,EAAQH,QACT,2BAAOF,UAAU,OAAOC,GAAII,EAAQH,QAASgC,IAnI7B,wEAmIoD7B,EAAQF,aAIhF,yBAAKgC,MAAM,UAAUlC,GAAG,WAAWK,KAAKa,MAAMD,iB,GAhElCkB,IAAMC,WCjEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASC,eAAe,iBDyHpB,kBAAmBmC,WACrBA,UAAUC,cAAclB,MACrBmB,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.249f9b96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport keydown from 'react-keydown';\nimport $ from \"jquery\";\n\nconst urlAllInstruments = \"https://www.bachataspice.com/extra-barrigan/drum-machine-instruments/\";\n\n\nconst drumPadArray = [{\n    className : \"drum-pad col-sm-4\",\n    id: \"bass-bombdive\",\n    playKey: \"Q\",\n    sound: \"bass-bombdive.mp3\"\n  },\n  {\n    className : \"drum-pad col-sm-4\",\n    id: \"conga22\",\n    playKey: \"W\",\n    sound: \"conga22.mp3\"\n  },\n  {\n    className : \"drum-pad col-sm-4\",\n    id: \"conga4\",\n    playKey: \"E\",\n    sound: \"conga4.mp3\"\n  },\n  {\n    className : \"drum-pad col-sm-4\",\n    id: \"crash2\",\n    playKey: \"A\",\n    sound: \"crash2.mp3\"\n  },\n  {\n    className : \"drum-pad col-sm-4\",\n    id: \"indo-thum\",\n    playKey: \"S\",\n    sound: \"indo-thum.mp3\"\n  },\n  {\n    className : \"drum-pad col-sm-4\",\n    id: \"eurobas\",\n    playKey: \"D\",\n    sound: \"eurobas.mp3\"\n  },\n  {\n    className : \"drum-pad col-sm-4\",\n    id: \"guitar-palm-1\",\n    playKey: \"Z\",\n    sound: \"guitar-palm-1.mp3\"\n  },\n  {\n    className : \"drum-pad col-sm-4\",\n    id: \"normal3\",\n    playKey: \"X\",\n    sound: \"normal3.mp3\"\n  },\n  {\n    className : \"drum-pad col-sm-4\",\n    id: \"sweden-ball-hit\",\n    playKey: \"C\",\n    sound: \"sweden-ball-hit.mp3\"\n  }];\n\nconst KEYS = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'];\n\n\nfunction buttonPressed(drumPad) {\n  return drumPad.playKey == this.toString().toUpperCase();\n}\n\nfunction playAudioById(id) {\n  var x = document.getElementById(id);\n  x.play();\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pressedKey : \"KEY DISPLAY\"\n    };\n\n    this.handlePressedKey = this.handlePressedKey.bind(this);\n\n}\n\ndisplayedKey = (key) => {\n  this.setState({\n    pressedKey: key\n    });\n}\n\nhandlePressedKey(event) {\n  this.displayedKey(event.target.value);\n  //console.log(\"Key Pressed: \", event.target.value);\n  var drumPad = drumPadArray.filter(buttonPressed,event.target.value);\n  if (drumPad.length >= 1) {\n    playAudioById(drumPad[0].playKey);\n  }\n}\n\ncomponentDidMount() {\n  document.addEventListener(\"keydown\", event => {\n    var drumPad = drumPadArray.filter(buttonPressed,event.key);\n    if (drumPad.length >= 1) {\n      // jQuery portion\n      $(document).ready(function(){\n        var id = \"#\"+drumPad[0].id;\n        $(id).addClass(\"pressed-drum\");\n      });\n      playAudioById(drumPad[0].playKey);\n      this.displayedKey(drumPad[0].playKey);\n    }  \n  });\n\n  document.addEventListener(\"keyup\", event => {\n    var drumPad = drumPadArray.filter(buttonPressed,event.key);\n    if (drumPad.length >= 1) {\n      $(document).ready(function(){\n        var id = \"#\"+drumPad[0].id;\n        $(id).removeClass(\"pressed-drum\");\n      });\n    }\n  });\n\n}\n    \n  render(){\n    return(\n    <div>\n      <div className=\"drum-pad-container row\">\n      {drumPadArray.map((drumPad) => (\n        <button className={drumPad.className} id={drumPad.id} onClick={this.handlePressedKey.bind(this)} value={drumPad.playKey}>\n          {drumPad.playKey}\n          <audio className=\"clip\" id={drumPad.playKey} src={urlAllInstruments+drumPad.sound}></audio>\n          </button>  \n      ))}\n        </div>\n      <div class=\"display\" id=\"display\">{this.state.pressedKey}</div>\n    </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('drum-machine')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}